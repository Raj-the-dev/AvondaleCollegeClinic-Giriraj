// <auto-generated />
using System;
using AvondaleCollegeClinic.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvondaleCollegeClinic.Migrations
{
    [DbContext(typeof(AvondaleCollegeClinicContext))]
    [Migration("20250907021551_UpdatingDocotorsFields")]
    partial class UpdatingDocotorsFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvondaleCollegeClinic.Areas.Identity.Data.AvondaleCollegeClinicUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("StudentID");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentID = 1,
                            AppointmentDateTime = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250001",
                            Reason = "General check-up",
                            Status = 1,
                            StudentID = "ac250001"
                        },
                        new
                        {
                            AppointmentID = 2,
                            AppointmentDateTime = new DateTime(2025, 4, 16, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250002",
                            Reason = "Follow-up on injury",
                            Status = 0,
                            StudentID = "ac250002"
                        },
                        new
                        {
                            AppointmentID = 3,
                            AppointmentDateTime = new DateTime(2025, 4, 17, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250003",
                            Reason = "Routine blood test",
                            Status = 3,
                            StudentID = "ac250003"
                        },
                        new
                        {
                            AppointmentID = 4,
                            AppointmentDateTime = new DateTime(2025, 4, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250004",
                            Reason = "Skin allergy consultation",
                            Status = 1,
                            StudentID = "ac250004"
                        },
                        new
                        {
                            AppointmentID = 5,
                            AppointmentDateTime = new DateTime(2025, 4, 19, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250005",
                            Reason = "Sore throat",
                            Status = 2,
                            StudentID = "ac250005"
                        },
                        new
                        {
                            AppointmentID = 6,
                            AppointmentDateTime = new DateTime(2025, 4, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250006",
                            Reason = "Mental health support",
                            Status = 0,
                            StudentID = "ac250006"
                        },
                        new
                        {
                            AppointmentID = 7,
                            AppointmentDateTime = new DateTime(2025, 4, 21, 10, 45, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250007",
                            Reason = "Back pain evaluation",
                            Status = 1,
                            StudentID = "ac250007"
                        },
                        new
                        {
                            AppointmentID = 8,
                            AppointmentDateTime = new DateTime(2025, 4, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250008",
                            Reason = "Yearly physical",
                            Status = 1,
                            StudentID = "ac250008"
                        },
                        new
                        {
                            AppointmentID = 9,
                            AppointmentDateTime = new DateTime(2025, 4, 23, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250009",
                            Reason = "Follow-up on flu",
                            Status = 3,
                            StudentID = "ac250009"
                        },
                        new
                        {
                            AppointmentID = 10,
                            AppointmentDateTime = new DateTime(2025, 4, 24, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250010",
                            Reason = "Foot injury assessment",
                            Status = 0,
                            StudentID = "ac250010"
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Caregiver", b =>
                {
                    b.Property<int>("CaregiverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaregiverID"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.HasKey("CaregiverID");

                    b.ToTable("Caregivers");

                    b.HasData(
                        new
                        {
                            CaregiverID = 1,
                            DOB = new DateTime(1980, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.wilson@email.com",
                            FirstName = "Emma",
                            LastName = "Wilson",
                            Phone = "021-123-4567",
                            Relationship = 0
                        },
                        new
                        {
                            CaregiverID = 2,
                            DOB = new DateTime(1975, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.evans@email.com",
                            FirstName = "John",
                            LastName = "Evans",
                            Phone = "022-987-6543",
                            Relationship = 0
                        },
                        new
                        {
                            CaregiverID = 3,
                            DOB = new DateTime(1985, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maya.singh@email.com",
                            FirstName = "Maya",
                            LastName = "Singh",
                            Phone = "021-555-8899",
                            Relationship = 1
                        },
                        new
                        {
                            CaregiverID = 4,
                            DOB = new DateTime(1979, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "chris.brown@email.com",
                            FirstName = "Chris",
                            LastName = "Brown",
                            Phone = "021-333-2222",
                            Relationship = 2
                        },
                        new
                        {
                            CaregiverID = 5,
                            DOB = new DateTime(1982, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophie.nguyen@email.com",
                            FirstName = "Sophie",
                            LastName = "Nguyen",
                            Phone = "022-111-5555",
                            Relationship = 0
                        },
                        new
                        {
                            CaregiverID = 6,
                            DOB = new DateTime(1973, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liam.king@email.com",
                            FirstName = "Liam",
                            LastName = "King",
                            Phone = "021-456-7890",
                            Relationship = 3
                        },
                        new
                        {
                            CaregiverID = 7,
                            DOB = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olivia.rao@email.com",
                            FirstName = "Olivia",
                            LastName = "Rao",
                            Phone = "021-999-8888",
                            Relationship = 0
                        },
                        new
                        {
                            CaregiverID = 8,
                            DOB = new DateTime(1981, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ethan.lee@email.com",
                            FirstName = "Ethan",
                            LastName = "Lee",
                            Phone = "022-123-9999",
                            Relationship = 1
                        },
                        new
                        {
                            CaregiverID = 9,
                            DOB = new DateTime(1986, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.taylor@email.com",
                            FirstName = "Grace",
                            LastName = "Taylor",
                            Phone = "021-234-5678",
                            Relationship = 0
                        },
                        new
                        {
                            CaregiverID = 10,
                            DOB = new DateTime(1977, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "raj.patel@email.com",
                            FirstName = "Raj",
                            LastName = "Patel",
                            Phone = "022-777-3333",
                            Relationship = 3
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("DiagnosisID");

                    b.HasIndex("AppointmentID")
                        .IsUnique();

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            DiagnosisID = 1,
                            AppointmentID = 1,
                            DateDiagnosed = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mild allergic reaction to pollen"
                        },
                        new
                        {
                            DiagnosisID = 2,
                            AppointmentID = 2,
                            DateDiagnosed = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sprained ankle during soccer"
                        },
                        new
                        {
                            DiagnosisID = 3,
                            AppointmentID = 3,
                            DateDiagnosed = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Seasonal flu symptoms"
                        },
                        new
                        {
                            DiagnosisID = 4,
                            AppointmentID = 4,
                            DateDiagnosed = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mild asthma attack"
                        },
                        new
                        {
                            DiagnosisID = 5,
                            AppointmentID = 5,
                            DateDiagnosed = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Concussion evaluation after PE"
                        },
                        new
                        {
                            DiagnosisID = 6,
                            AppointmentID = 6,
                            DateDiagnosed = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stomach virus"
                        },
                        new
                        {
                            DiagnosisID = 7,
                            AppointmentID = 7,
                            DateDiagnosed = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sinus infection"
                        },
                        new
                        {
                            DiagnosisID = 8,
                            AppointmentID = 8,
                            DateDiagnosed = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Minor burn on hand"
                        },
                        new
                        {
                            DiagnosisID = 9,
                            AppointmentID = 9,
                            DateDiagnosed = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stress-related headaches"
                        },
                        new
                        {
                            DiagnosisID = 10,
                            AppointmentID = 10,
                            DateDiagnosed = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rash caused by detergent allergy"
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorID = "acd-250001",
                            Email = "anna.roberts@avondaleclinic.com",
                            FirstName = "Anna",
                            LastName = "Roberts",
                            Phone = "021-111-2345",
                            Photo = "",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorID = "acd-250002",
                            Email = "ben.morris@avondaleclinic.com",
                            FirstName = "Ben",
                            LastName = "Morris",
                            Phone = "021-222-3456",
                            Photo = "",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorID = "acd-250003",
                            Email = "claire.nguyen@avondaleclinic.com",
                            FirstName = "Claire",
                            LastName = "Nguyen",
                            Phone = "021-333-4567",
                            Photo = "",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorID = "acd-250004",
                            Email = "david.chen@avondaleclinic.com",
                            FirstName = "David",
                            LastName = "Chen",
                            Phone = "021-444-5678",
                            Photo = "",
                            Specialization = 3
                        },
                        new
                        {
                            DoctorID = "acd-250005",
                            Email = "ella.turner@avondaleclinic.com",
                            FirstName = "Ella",
                            LastName = "Turner",
                            Phone = "021-555-6789",
                            Photo = "",
                            Specialization = 4
                        },
                        new
                        {
                            DoctorID = "acd-250006",
                            Email = "frank.white@avondaleclinic.com",
                            FirstName = "Frank",
                            LastName = "White",
                            Phone = "021-666-7890",
                            Photo = "",
                            Specialization = 0
                        },
                        new
                        {
                            DoctorID = "acd-250007",
                            Email = "grace.lee@avondaleclinic.com",
                            FirstName = "Grace",
                            LastName = "Lee",
                            Phone = "021-777-8901",
                            Photo = "",
                            Specialization = 1
                        },
                        new
                        {
                            DoctorID = "acd-250008",
                            Email = "harry.singh@avondaleclinic.com",
                            FirstName = "Harry",
                            LastName = "Singh",
                            Phone = "021-888-9012",
                            Photo = "",
                            Specialization = 2
                        },
                        new
                        {
                            DoctorID = "acd-250009",
                            Email = "isla.walker@avondaleclinic.com",
                            FirstName = "Isla",
                            LastName = "Walker",
                            Phone = "021-999-0123",
                            Photo = "",
                            Specialization = 3
                        },
                        new
                        {
                            DoctorID = "acd-250010",
                            Email = "jack.patel@avondaleclinic.com",
                            FirstName = "Jack",
                            LastName = "Patel",
                            Phone = "021-000-1234",
                            Photo = "",
                            Specialization = 4
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.DoctorAvailability", b =>
                {
                    b.Property<int>("DoctorAvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorAvailabilityID"));

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorAvailabilityID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorAvailabilities");

                    b.HasData(
                        new
                        {
                            DoctorAvailabilityID = 1,
                            AvailableDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250001",
                            EndTime = new DateTime(2025, 4, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 15, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 2,
                            AvailableDate = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250002",
                            EndTime = new DateTime(2025, 4, 16, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 16, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 3,
                            AvailableDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250003",
                            EndTime = new DateTime(2025, 4, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 17, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 4,
                            AvailableDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250004",
                            EndTime = new DateTime(2025, 4, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 18, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 5,
                            AvailableDate = new DateTime(2025, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250005",
                            EndTime = new DateTime(2025, 4, 19, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 19, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 6,
                            AvailableDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250006",
                            EndTime = new DateTime(2025, 4, 20, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 20, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 7,
                            AvailableDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250007",
                            EndTime = new DateTime(2025, 4, 21, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 21, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 8,
                            AvailableDate = new DateTime(2025, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250008",
                            EndTime = new DateTime(2025, 4, 22, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 22, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 9,
                            AvailableDate = new DateTime(2025, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250009",
                            EndTime = new DateTime(2025, 4, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 23, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorAvailabilityID = 10,
                            AvailableDate = new DateTime(2025, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250010",
                            EndTime = new DateTime(2025, 4, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 4, 24, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Homeroom", b =>
                {
                    b.Property<string>("HomeroomID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearLevel")
                        .HasColumnType("int");

                    b.HasKey("HomeroomID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Homerooms");

                    b.HasData(
                        new
                        {
                            HomeroomID = "hr250001",
                            Block = 0,
                            ClassNumber = 1,
                            TeacherID = "act-250001",
                            YearLevel = 9
                        },
                        new
                        {
                            HomeroomID = "hr250002",
                            Block = 1,
                            ClassNumber = 2,
                            TeacherID = "act-250002",
                            YearLevel = 10
                        },
                        new
                        {
                            HomeroomID = "hr250003",
                            Block = 2,
                            ClassNumber = 3,
                            TeacherID = "act-250003",
                            YearLevel = 11
                        },
                        new
                        {
                            HomeroomID = "hr250004",
                            Block = 3,
                            ClassNumber = 4,
                            TeacherID = "act-250004",
                            YearLevel = 12
                        },
                        new
                        {
                            HomeroomID = "hr250005",
                            Block = 4,
                            ClassNumber = 5,
                            TeacherID = "act-250005",
                            YearLevel = 13
                        },
                        new
                        {
                            HomeroomID = "hr250006",
                            Block = 5,
                            ClassNumber = 6,
                            TeacherID = "act-250006",
                            YearLevel = 9
                        },
                        new
                        {
                            HomeroomID = "hr250007",
                            Block = 0,
                            ClassNumber = 7,
                            TeacherID = "act-250007",
                            YearLevel = 10
                        },
                        new
                        {
                            HomeroomID = "hr250008",
                            Block = 1,
                            ClassNumber = 8,
                            TeacherID = "act-250008",
                            YearLevel = 11
                        },
                        new
                        {
                            HomeroomID = "hr250009",
                            Block = 2,
                            ClassNumber = 9,
                            TeacherID = "act-250009",
                            YearLevel = 12
                        },
                        new
                        {
                            HomeroomID = "hr250010",
                            Block = 3,
                            ClassNumber = 10,
                            TeacherID = "act-250010",
                            YearLevel = 13
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Labtest", b =>
                {
                    b.Property<int>("LabtestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabtestID"));

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ResultDate")
                        .HasColumnType("date");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LabtestID");

                    b.HasIndex("RecordID");

                    b.ToTable("LabTests");

                    b.HasData(
                        new
                        {
                            LabtestID = 1,
                            File = "report1.pdf",
                            RecordID = 1,
                            ResultDate = new DateOnly(2024, 10, 11),
                            TestType = "Blood Test 1"
                        },
                        new
                        {
                            LabtestID = 2,
                            File = "report2.pdf",
                            RecordID = 2,
                            ResultDate = new DateOnly(2024, 10, 12),
                            TestType = "Blood Test 2"
                        },
                        new
                        {
                            LabtestID = 3,
                            File = "report3.pdf",
                            RecordID = 3,
                            ResultDate = new DateOnly(2024, 10, 13),
                            TestType = "Blood Test 3"
                        },
                        new
                        {
                            LabtestID = 4,
                            File = "report4.pdf",
                            RecordID = 4,
                            ResultDate = new DateOnly(2024, 10, 14),
                            TestType = "Blood Test 4"
                        },
                        new
                        {
                            LabtestID = 5,
                            File = "report5.pdf",
                            RecordID = 5,
                            ResultDate = new DateOnly(2024, 10, 15),
                            TestType = "Blood Test 5"
                        },
                        new
                        {
                            LabtestID = 6,
                            File = "report6.pdf",
                            RecordID = 6,
                            ResultDate = new DateOnly(2024, 10, 16),
                            TestType = "Blood Test 6"
                        },
                        new
                        {
                            LabtestID = 7,
                            File = "report7.pdf",
                            RecordID = 7,
                            ResultDate = new DateOnly(2024, 10, 17),
                            TestType = "Blood Test 7"
                        },
                        new
                        {
                            LabtestID = 8,
                            File = "report8.pdf",
                            RecordID = 8,
                            ResultDate = new DateOnly(2024, 10, 18),
                            TestType = "Blood Test 8"
                        },
                        new
                        {
                            LabtestID = 9,
                            File = "report9.pdf",
                            RecordID = 9,
                            ResultDate = new DateOnly(2024, 10, 19),
                            TestType = "Blood Test 9"
                        },
                        new
                        {
                            LabtestID = 10,
                            File = "report10.pdf",
                            RecordID = 10,
                            ResultDate = new DateOnly(2024, 10, 20),
                            TestType = "Blood Test 10"
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicalRecordID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("StudentID");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            MedicalRecordID = 1,
                            Date = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250001",
                            Notes = "Routine annual check-up. No issues found.",
                            StudentID = "ac250001"
                        },
                        new
                        {
                            MedicalRecordID = 2,
                            Date = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250002",
                            Notes = "Reviewed knee sprain. Advised rest and light exercises.",
                            StudentID = "ac250002"
                        },
                        new
                        {
                            MedicalRecordID = 3,
                            Date = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250003",
                            Notes = "Blood test completed. Results within normal range.",
                            StudentID = "ac250003"
                        },
                        new
                        {
                            MedicalRecordID = 4,
                            Date = new DateTime(2025, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250004",
                            Notes = "Observed rash on arms. Prescribed topical cream.",
                            StudentID = "ac250004"
                        },
                        new
                        {
                            MedicalRecordID = 5,
                            Date = new DateTime(2025, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250005",
                            Notes = "Reported headache and fatigue. Referred for lab tests.",
                            StudentID = "ac250005"
                        },
                        new
                        {
                            MedicalRecordID = 6,
                            Date = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250006",
                            Notes = "Initial consultation for anxiety symptoms. Scheduled follow-up.",
                            StudentID = "ac250006"
                        },
                        new
                        {
                            MedicalRecordID = 7,
                            Date = new DateTime(2025, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250007",
                            Notes = "Complaints of lower back pain. Stretching advised.",
                            StudentID = "ac250007"
                        },
                        new
                        {
                            MedicalRecordID = 8,
                            Date = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250008",
                            Notes = "Regular check-up completed. Advised hydration.",
                            StudentID = "ac250008"
                        },
                        new
                        {
                            MedicalRecordID = 9,
                            Date = new DateTime(2025, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250009",
                            Notes = "Follow-up after flu recovery. Patient doing well.",
                            StudentID = "ac250009"
                        },
                        new
                        {
                            MedicalRecordID = 10,
                            Date = new DateTime(2025, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = "acd-250010",
                            Notes = "Foot strain reviewed. Rest and ice recommended.",
                            StudentID = "ac250010"
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<int>("DiagnosisID")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DiagnosisID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionID = 1,
                            DiagnosisID = 1,
                            Dosage = "10mg once daily",
                            EndDate = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Cetirizine",
                            StartDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 2,
                            DiagnosisID = 2,
                            Dosage = "200mg every 6 hours",
                            EndDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Ibuprofen",
                            StartDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 3,
                            DiagnosisID = 3,
                            Dosage = "500mg every 4-6 hours",
                            EndDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Paracetamol",
                            StartDate = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 4,
                            DiagnosisID = 4,
                            Dosage = "2 puffs as needed",
                            EndDate = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Albuterol Inhaler",
                            StartDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 5,
                            DiagnosisID = 5,
                            Dosage = "As needed",
                            EndDate = new DateTime(2024, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Rest and hydration",
                            StartDate = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 6,
                            DiagnosisID = 6,
                            Dosage = "2mg after each loose stool",
                            EndDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Loperamide",
                            StartDate = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 7,
                            DiagnosisID = 7,
                            Dosage = "500mg three times daily",
                            EndDate = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Amoxicillin",
                            StartDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 8,
                            DiagnosisID = 8,
                            Dosage = "Apply twice daily",
                            EndDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Aloe Vera Gel",
                            StartDate = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 9,
                            DiagnosisID = 9,
                            Dosage = "200mg twice daily",
                            EndDate = new DateTime(2024, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Ibuprofen",
                            StartDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrescriptionID = 10,
                            DiagnosisID = 10,
                            Dosage = "Apply once daily",
                            EndDate = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Medication = "Hydrocortisone cream",
                            StartDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CaregiverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeroomID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentID");

                    b.HasIndex("CaregiverID");

                    b.HasIndex("HomeroomID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = "ac250001",
                            CaregiverID = 3,
                            DOB = new DateTime(2007, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sam.hill@school.com",
                            FirstName = "Sam",
                            HomeroomID = "hr250001",
                            ImagePath = "",
                            LastName = "Hill"
                        },
                        new
                        {
                            StudentID = "ac250002",
                            CaregiverID = 3,
                            DOB = new DateTime(2008, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lily.evans@school.com",
                            FirstName = "Lily",
                            HomeroomID = "hr250003",
                            ImagePath = "",
                            LastName = "Evans"
                        },
                        new
                        {
                            StudentID = "ac250003",
                            CaregiverID = 3,
                            DOB = new DateTime(2009, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jake.smith@school.com",
                            FirstName = "Jake",
                            HomeroomID = "hr250003",
                            ImagePath = "",
                            LastName = "Smith"
                        },
                        new
                        {
                            StudentID = "ac250004",
                            CaregiverID = 3,
                            DOB = new DateTime(2007, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.johnson@school.com",
                            FirstName = "Emma",
                            HomeroomID = "hr250001",
                            ImagePath = "",
                            LastName = "Johnson"
                        },
                        new
                        {
                            StudentID = "ac250005",
                            CaregiverID = 4,
                            DOB = new DateTime(2008, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mia.brown@school.com",
                            FirstName = "Mia",
                            HomeroomID = "hr250003",
                            ImagePath = "",
                            LastName = "Brown"
                        },
                        new
                        {
                            StudentID = "ac250006",
                            CaregiverID = 2,
                            DOB = new DateTime(2009, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "noah.taylor@school.com",
                            FirstName = "Noah",
                            HomeroomID = "hr250002",
                            ImagePath = "",
                            LastName = "Taylor"
                        },
                        new
                        {
                            StudentID = "ac250007",
                            CaregiverID = 1,
                            DOB = new DateTime(2007, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olivia.anderson@school.com",
                            FirstName = "Olivia",
                            HomeroomID = "hr250001",
                            ImagePath = "",
                            LastName = "Anderson"
                        },
                        new
                        {
                            StudentID = "ac250008",
                            CaregiverID = 3,
                            DOB = new DateTime(2008, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liam.thomas@school.com",
                            FirstName = "Liam",
                            HomeroomID = "hr250001",
                            ImagePath = "",
                            LastName = "Thomas"
                        },
                        new
                        {
                            StudentID = "ac250009",
                            CaregiverID = 5,
                            DOB = new DateTime(2009, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ava.jackson@school.com",
                            FirstName = "Ava",
                            HomeroomID = "hr250002",
                            ImagePath = "",
                            LastName = "Jackson"
                        },
                        new
                        {
                            StudentID = "ac250010",
                            CaregiverID = 1,
                            DOB = new DateTime(2007, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ethan.white@school.com",
                            FirstName = "Ethan",
                            HomeroomID = "hr250002",
                            ImagePath = "",
                            LastName = "White"
                        });
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("TeacherID");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherID = "act-250001",
                            Email = "olivia.park@avondale.school.nz",
                            FirstName = "Olivia",
                            LastName = "Park",
                            TeacherCode = "OPA"
                        },
                        new
                        {
                            TeacherID = "act-250002",
                            Email = "james.ngata@avondale.school.nz",
                            FirstName = "James",
                            LastName = "Ngata",
                            TeacherCode = "JNG"
                        },
                        new
                        {
                            TeacherID = "act-250003",
                            Email = "sophia.lee@avondale.school.nz",
                            FirstName = "Sophia",
                            LastName = "Lee",
                            TeacherCode = "SLE"
                        },
                        new
                        {
                            TeacherID = "act-250004",
                            Email = "ethan.white@avondale.school.nz",
                            FirstName = "Ethan",
                            LastName = "White",
                            TeacherCode = "EWH"
                        },
                        new
                        {
                            TeacherID = "act-250005",
                            Email = "ava.singh@avondale.school.nz",
                            FirstName = "Ava",
                            LastName = "Singh",
                            TeacherCode = "ASI"
                        },
                        new
                        {
                            TeacherID = "act-250006",
                            Email = "william.morris@avondale.school.nz",
                            FirstName = "William",
                            LastName = "Morris",
                            TeacherCode = "WMO"
                        },
                        new
                        {
                            TeacherID = "act-250007",
                            Email = "isabella.tao@avondale.school.nz",
                            FirstName = "Isabella",
                            LastName = "Tao",
                            TeacherCode = "ITA"
                        },
                        new
                        {
                            TeacherID = "act-250008",
                            Email = "lucas.patel@avondale.school.nz",
                            FirstName = "Lucas",
                            LastName = "Patel",
                            TeacherCode = "LPA"
                        },
                        new
                        {
                            TeacherID = "act-250009",
                            Email = "emily.brown@avondale.school.nz",
                            FirstName = "Emily",
                            LastName = "Brown",
                            TeacherCode = "EBR"
                        },
                        new
                        {
                            TeacherID = "act-250010",
                            Email = "daniel.king@avondale.school.nz",
                            FirstName = "Daniel",
                            LastName = "King",
                            TeacherCode = "DKG"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Appointment", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvondaleCollegeClinic.Models.Student", "Student")
                        .WithMany("Appointments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Diagnosis", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Appointment", "Appointment")
                        .WithOne("Diagnosis")
                        .HasForeignKey("AvondaleCollegeClinic.Models.Diagnosis", "AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.DoctorAvailability", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Doctor", "Doctor")
                        .WithMany("Availabilities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Homeroom", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Teacher", "Teacher")
                        .WithMany("Homerooms")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Labtest", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Labtests")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.MedicalRecord", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvondaleCollegeClinic.Models.Student", "Student")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Prescription", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Diagnosis", "Diagnosis")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DiagnosisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Student", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Models.Caregiver", "Caregiver")
                        .WithMany("Students")
                        .HasForeignKey("CaregiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AvondaleCollegeClinic.Models.Homeroom", "Homeroom")
                        .WithMany("Students")
                        .HasForeignKey("HomeroomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");

                    b.Navigation("Homeroom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Areas.Identity.Data.AvondaleCollegeClinicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Areas.Identity.Data.AvondaleCollegeClinicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvondaleCollegeClinic.Areas.Identity.Data.AvondaleCollegeClinicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AvondaleCollegeClinic.Areas.Identity.Data.AvondaleCollegeClinicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Appointment", b =>
                {
                    b.Navigation("Diagnosis")
                        .IsRequired();
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Caregiver", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Diagnosis", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Homeroom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.MedicalRecord", b =>
                {
                    b.Navigation("Labtests");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Student", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("AvondaleCollegeClinic.Models.Teacher", b =>
                {
                    b.Navigation("Homerooms");
                });
#pragma warning restore 612, 618
        }
    }
}
